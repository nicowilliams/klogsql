#!/ms/dist/fsf/PROJ/ksh/93u/bin/ksh

# Copyright (c) 2012, Secure Endpoints Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

# This is a dead-simple MIT krb5 log entry parser.  It doesn't handle
# principal names that have commas, colons, or whitespace embedded.
# That's probably OK.

PROG=$0

PATH=$PATH:/ms/dist/fsf/PROJ/sqlite/3.6.22/bin

function usage {
cat <<EOF
Usage:	$PROG [options] [<args>]
	$PROG -i [-D <days>] <main-db>
	$PROG -a -m <main-db> [-l <log-db>] [<log-db> ..]
	$PROG -I -m <main-db> -l <log-db> [<logfile>]
	$PROG -L -m <main-db> -l <log-db> [<logfile> ..]
	$PROG -X -l <log-db> [<logfile>]
	$PROG -A -l <log-db> [<logfile>]
	$PROG -LXA -m <main-db> -l <log-db> [<logfile> ..]

    $PROG initializes, loads, analyzes and aggregates KDC log messages.

    Options:

	-q		Quiet
	-s file		Copy SQL commands to <file>
	-v		Verbose (default: on)
	-v -v		Show SQL on /dev/tty or stderr (default: off)
	-m main-db	Name of main database
	-l log-db	Name of log entry database
	-n number	Number of log entries per-transaction (default: 10000)
	-p number	Progress bar with one line of periods every <number>
			entries (default: 2000)
	-D days		Number of days of aggregated log entries to keep

	-i		Initialize main DB (idempotent; remove DB to
			re-initialize)
	-a		Emit SQLite3 statements for attaching <log-db> and any
			additional log database names listed as additional
			arguments into a connection on <main-db>
	-I		Incrementally load data into <log-db> and analyze and
			aggregate incrementally (useful for consuming log
			entries from syslog live)
	-L		Load all entries from <logfile> or stdin into <log-db>,
			then aggregate into main-db afterwards
	-X		Index <log-db>
	-A		Analyze log entries from <log-db> and update <main-db>

    The <main-db> is used for summary historical data with no more than
    one row per-principal in the 'princ' table, one row per-client IP
    address in the 'client' table, and up to one row per-{client IP,
    client principal, server principal} in the 'client_cname_sname' table.
    Additional tables keep aggregated log entries.

    The <log-db> contains actual log entries.  These log entries can
    be quite numerous, and though they are useful for many reporting
    queries, they also consume much storage.  Keeping log entries
    separate makes it possible to trivially expunge them by simply
    deleting the <log-db> files.

    To load an entire log file use -LXA.  To incrementally load a log file
    (e.g., from syslog, via a pipe) use -I.
EOF
    exit 1
}

# Utility functions; yes, we use global vars; sue me

function clean_values {
    # Clean up strings; we want neither single quotes (we don't want SQL
    # injection vulnerabilities here) nor printf % tokens (same deal).
    logtime=${logtime//[%\']/}
    kdc=${kdc//[%\']/}
    reqtype=${reqtype//[%\']/}
    cprinc=${cprinc//[%\']/}
    sprinc=${sprinc//[%\']/}
    code=${code//[%\']/}
    reason=${reason//[%\']/}

    # Clean up numbers (only decimal digits pleas)
    [[ "$reqenctypes" = @([ 0-9]) ]] || reqenctypes=0
    [[ "$authtime" = @([0-9]) ]] || authtime=0
    [[ "$repenctype" = @([0-9]) ]] || repenctype=0
    [[ "$tktenctype" = @([0-9]) ]] || tktenctype=0
    [[ "$sessenctype" = @([0-9]) ]] || sessenctype=0
}

function insert_enctypes {
    # INSERT OR IGNORE goes through the process of allocating an
    # autoincremented INTEGER PRIMARY KEY (a.k.a., rowid) before
    # deciding to ignore.  This is bad.  This idiom is faster, better.
    printf " INSERT INTO req_enctypes_lists (enctype_list, enctype_list_orig)
  SELECT DISTINCT req_enctypes AS e, req_enctypes_orig AS eo
  FROM log_entry_success
  WHERE NOT EXISTS (SELECT id FROM req_enctypes_lists el
    WHERE el.enctype_list = e AND el.enctype_list_orig = eo);\n"
    printf " INSERT INTO req_enctypes_lists (enctype_list, enctype_list_orig)
  SELECT DISTINCT req_enctypes AS e, req_enctypes_orig AS eo
  FROM log_entry_fail
  WHERE NOT EXISTS (SELECT id FROM req_enctypes_lists el
    WHERE el.enctype_list = e AND el.enctype_list_orig = eo);\n"
}

function insert_success {
    printf "INSERT INTO ${db_name}log_entry_success
  (log_time, kdc, ip, req_type, req_enctypes, req_enctypes_orig,
   authtime, client_name, server_name,
   reply_enctype, ticket_enctype, session_enctype)
  SELECT
    strftime('%%s', '%s'), '%s', '%s',
    CASE '%s' WHEN 'AS_REQ' THEN 0 ELSE 1 END, 
    '%s', '%s', %s, '%s', '%s', %s, %s, %s;\n" \
        "$logtime" "$kdc" "$reqip" "$reqtype" "$reqenctypes" "$reqenctypes_o" \
	"$authtime" "$cprinc" "$sprinc" "$repenctype" "$tktenctype" \
	"$sessenctype"
}

function insert_failure {
    printf "INSERT INTO ${db_name}log_entry_fail
  (log_time, kdc, ip, req_type,
   req_enctypes, req_enctypes_orig, code, reason, client_name, server_name)
  SELECT
    strftime('%%s', '%s'), '%s', '%s',
    CASE '%s' WHEN 'AS_REQ' THEN 0 ELSE 1 END,
    '%s', '%s', '%s', '%s', '%s', '%s';\n" \
        "$logtime" "$kdc" "$reqip" "$reqtype" "$reqenctypes" "$reqenctypes_o" \
	"$code" "$reason" "$cprinc" "$sprinc"
}

function attach {
    typeset -a args=("$@")
    integer i=0
    while ((i < $#)); do
        printf "ATTACH '%s' as logs%d;\n" "${args[$i]}" "$i"
        ((i++))
    done
    integer i=0
    printf "CREATE TEMP VIEW log_entry_success AS\n"
    while ((i < $#)); do
        printf "  SELECT rowid, * FROM logs%d.log_entry_success" "$i"
        if ((++i < $#)); then
            printf "\n  UNION ALL\n"
        else
            printf ";\n"
        fi
    done
    integer i=0
    printf "CREATE TEMP VIEW log_entry_fail AS\n"
    while ((i < $#)); do
        printf "  SELECT * FROM logs%d.log_entry_fail" "$i"
        if ((++i < $#)); then
            printf "\n  UNION ALL\n"
        else
            printf ";\n"
        fi
    done
}

function prune {
    $verbose && printf "SELECT 'Pruning old aggregated entries', datetime('now');\n"
    printf "\
    DELETE FROM client_slice_data \
    WHERE starttime < (SELECT o.opt * 24 * 3600
		      FROM options o WHERE opt = 'days');\n"
    printf "\
    DELETE FROM princ_slice_data \
    WHERE starttime < (SELECT o.opt * 24 * 3600
		      FROM options o WHERE opt = 'days');\n"
    printf "\
    DELETE FROM ccs_slice_data \
    WHERE starttime < (SELECT o.opt * 24 * 3600
		      FROM options o WHERE opt = 'days');\n"
    $verbose && printf "SELECT 'Pruned old aggregated entries', datetime('now');\n"
}

function load_log_entries {
    # This is somewhat gross.  We basically use the shell's split on
    # $IFS feature to parse kdc log entries.  Note that there are
    # ambiguiities unless krb5_unparse_name() knows to quote the
    # separator chars used in log entries (and... it doesn't).  The use
    # of the shell for parsing these log entries, then, is fine, but it
    # is rather hacky.
    #
    integer lineno=0
    integer count_per_dot
    integer i
    IFS=
    ((count_per_dot = progress_bar / 80))
    printf "PRAGMA synchronous = off;\n"
    printf "BEGIN IMMEDIATE;\n"
    while read line; do
        rawline="$line"
        ((lineno++))
	((progress_bar && lineno % count_per_dot == 0)) && printf "." 1>$tty
        if ((lineno % num_per_commit == 0)); then
	    ((progress_bar)) && printf "\nAt line number %d\n" $lineno 1>$tty
	    if ((incr_analysis)); then
		insert_enctypes
		$verbose && printf "SELECT 'Analyzing...';\n"
		$verbose && printf "SELECT 'Analyzing at ', datetime('now'), '...';\n"
		printf ".read analyze.sql\n"
		$verbose && printf "SELECT 'Aggregating at ', datetime('now'), '...';\n"
		printf ".read aggregate_data.sql\n"
		$verbose && printf "SELECT 'Looping at ', datetime('now'), '...';\n"
		printf "DELETE FROM ${db_name}log_entry_success;\n"
		printf "DELETE FROM ${db_name}log_entry_fail;\n"
		prune
	    fi
            printf "COMMIT;\n"
            printf "BEGIN IMMEDIATE;\n"
        fi
        # logtime... is hard to parse, so we cheat some and let sqlite3
        # parse it
        IFS=$OIFS
        f1=${line%% @(krb|old|dmz|afsdmz)5kdc*}
        line=${line#${f1#*: }*: }
        kdc=${f1##* }
        logtime=${f1%% *} 
        if [[ "$logtime" = *[-+]???? ]]; then
            logtime=${logtime%??}:00
        fi

        # Split on :
        IFS=:
        set -- $line

        if (($# == 0)); then
            printf "Error: malformed entry at line # %d\n" $lineno 1>&2
            continue
        fi

        # Get the request type, enctype list from the request, and
        # client IP adress from the second :-separated field
        #
        # E.g., split "AS_REQ (4 etypes {1 18 23 16}) 1.2.3.4" on
        # whitespace, parenthesis, and curly braces, so we get something
        # like j[0]=AS_REQ, j[1]=4, j[2]=etypes, j[3]1, .., j[7]=1.2.3.4
        IFS="${OIFS}(){}"
        set -A j -- $1
            # request type
            reqtype=${j[0]}
            # gather up the request enctypes
            set -A reqenctypes_a
            i=3
	    while ((i < (${#j[@]} - 2) )); do
                reqenctypes_a[((i - 3))]=${j[$i]}
                ((i++))
            done
            IFS=$OIFS
            reqenctypes_o="${reqenctypes_a[*]}"
	    i=1
	    while ((i < ${#reqenctypes_a[@]} && ${reqenctypes_a[0]:-1111} == ${reqenctypes_a[i]:-0})); do
		unset reqenctypes_a[i]
		((i++))
	    done
            reqenctypes="${reqenctypes_a[*]}"
            ((${#reqenctypes} == 0)) && printf "Whoops! empty enctypelist at line # %d (%s)\n" $lineno "$rawline" 1>&2
            # request client IP address
            reqip=${j[$((${#j[@]} - 1))]}

        # Get result code from the third :-separated field
        code=${2## }
        if [[ "$code" = ISSUE ]]; then
            # Get result authtime, ... from the last :-separated field
            #
            # I.e., from something like "authtime 1329894121, etypes
            # {rep=18 tkt=17 ses=1}, client_princname@REALM for
            # krbtgt/REALM@REALM"
            #
            # First split on commas
            IFS=,
            set -A j -- $3

            # Then split on each comma-separated field on whitespace and
            # curly braces
            IFS="${OIFS}{}"
                # get authtime
                set -A k -- ${j[0]}
                authtime=${k[1]}
                # get etypes
                set -A k -- ${j[1]}
                repenctype=${k[1]#*=}
                tktenctype=${k[2]#*=}
                sessenctype=${k[3]#*=}
                # Get client and server principal names.  We just
                # re-split everything; it's easier.
                m=${line#*:*:*,*, *}
                cprinc=${m// for */}
                sprinc=${m/#* for /}

            # Finally print SQL INSERT statements; we use global
            # variables for this -- deal with it.
            IFS=$OIFS
	    clean_values
            insert_success
        else
            # Failure log entry.
            #
            # Get client and server principal names, and the reason for the
            # error.  We just re-split everything; it's easier.
            m=${line#*:*:*:*:*:*:}
            reason=${m##*,?( )}
            m=${m%,*}
            cprinc=${m// for */}
            cprinc=${cprinc## }
            sprinc=${m/#* for /}
            #
            # Print the SQL INSERT statements.
	    clean_values
            insert_failure
        fi

        # Clean up
        IFS=$OIFS
        unset j
        unset k
        unset reqenctypes_a
        #printf "." > $tty
        #((lineno % 80 == 0 && lineno > 0)) && printf '\n' > $tty
    #printf "\n" > $tty

    done
    printf "COMMIT;\n"
}

function index {
    typeset idb idxname tblname cols
    idb=$1
    idxname=$2
    tblname=$3
    cols=$4
    shift 4
    while (($#)); do
	cols="$cols, $cols"
	shift
    done
    $verbose && printf "SELECT 'Start creating log index %s ', datetime('now', 'localtime');\n" "$idxname"
    printf "CREATE INDEX IF NOT EXISTS ${idb}$idxname ON $tblname ($cols);\n"
    $verbose && printf "SELECT 'Finished creating log index %s ', datetime('now', 'localtime');\n" "$idxname"
}

function is_int {
    [[ "$1" = +([0-9]) ]] && return 0
    return 1
}

OIFS=$IFS
set -o noglob

tty=/dev/fd2
[[ -t 0 || -t 1 || -t 2 ]] && tty=/dev/tty

db=
days=0
logdb=
verbose=true
do_init=false
do_incr=false
do_load=false
tee_sql=
do_index=false
do_attach=false
do_analyze=false
integer progress_bar=2000
integer num_per_commit=10000
while getopts ":daiILXAD:l:m:n:p:qs:v" opt "$@"; do
    case "$opt" in
	[?]) usage;;
	d) set -x; typeset -ft $(typeset +f|tr -d '()');;
	D) is_int "$OPTARG" || usage; days=$OPTARG;;
	l) logdb=$OPTARG;;
	m) db=$OPTARG;;
	n) is_int "$OPTARG" || usage; num_per_commit=$OPTARG;;
	p) is_int "$OPTARG" || usage; progress_bar=$OPTARG;;
	q) verbose=false; progress_bar=0;;
	v) $verbose && tee_sql="tee ${tty} |"; verbose=true;;
	s) show_sql=true; tee_sql="tee $OPTARG |";;
	a) do_attach=true;;
	i) do_init=true;;
	I) do_incr=true;;
	L) do_load=true;;
	X) do_index=true;;
	A) do_analyze=true;;
    esac
done
shift $((OPTIND - 1))

# Check for mutually exclusive arguments
integer k
k=0
$do_attach && ((k++))
$do_init && ((k++))
$do_incr && ((k++))
($do_load || $do_index || $do_analyze) && ((k++))
((k == 1)) || usage

if $do_init; then
    [[ -n "$db" ]] || usage
    sqlite3 "$db" < schema_main.sql
    ((days)) && printf "INSERT OR REPLACE INTO options (opt, val) VALUES ('days', %d);\n" $days | sqlite3 "$db"
    exit $?
elif $do_attach; then
    [[ -n "$logdb" ]] || usage
    attach "$logdb" "$@"
    exit $?
elif $do_incr; then
    [[ -n "$db" ]] || usage
    [[ -n "$logdb" ]] || usage
    (($# > 1)) && usage
    incr_analysis=1
    db_name=logs0.
    sqlite3 "$db" < schema_main.sql
    sqlite3 "$logdb" < schema_log.sql
    (
	attach "$logdb"
	((days)) && printf "INSERT OR REPLACE INTO options (opt, val) VALUES ('days', %d);\n" $days
	index $db_name log_entry_success_ip log_entry_success ip log_time
	index $db_name log_entry_success_cn log_entry_success client_name log_time
	index $db_name log_entry_success_sn log_entry_success server_name log_time
	index $db_name log_entry_success_ipcn log_entry_success ip authtime client_name log_time
	index $db_name log_entry_success_ipsn log_entry_success ip authtime server_name log_time
	index $db_name log_entry_fail_ip log_entry_fail ip log_time
	index $db_name log_entry_fail_cp log_entry_fail client_name log_time
	if (($# == 1)); then
	    grep -v 'TGS_REQ.*krbtgt/\(.*\)[@]\1' "$1" | load_log_entries 10000
	else
	    grep -v 'TGS_REQ.*krbtgt/\(.*\)[@]\1' | load_log_entries 10000
	fi
    ) < "${1:-/dev/fd/0}" | $tee_sql sqlite3 "$db"
    exit $?
fi

if $do_load; then
    [[ -n "$logdb" ]] || usage
    incr_analysis=0
    (($# == 0)) && set -- /dev/fd/0
    sqlite3 "$logdb" < schema_log.sql
    (
        printf "PRAGMA synchronous = OFF;\n"
        $verbose && printf "SELECT 'Starting load at ', datetime('now', 'localtime');\n"
        for logfile in "$@"; do
            grep -v 'TGS_REQ.*krbtgt/\(.*\)[@]\1' "$logfile" | load_log_entries 2000
        done
        $verbose && printf "SELECT 'Load complete at ', datetime('now', 'localtime');\n"
    ) |  $tee_sql sqlite3 "$logdb"
fi
if $do_index; then
    [[ -n "$logdb" ]] || usage
    db_name=''
    (
	printf "PRAGMA synchronous = off;\n"
	index "$db_name" log_entry_success_ip log_entry_success ip log_time
	index "$db_name" log_entry_success_cn log_entry_success client_name log_time
	index "$db_name" log_entry_success_sn log_entry_success server_name log_time
	index "$db_name" log_entry_success_ipcn log_entry_success ip authtime client_name log_time
	index "$db_name" log_entry_success_ipsn log_entry_success ip authtime server_name log_time
	index "$db_name" log_entry_fail_ip log_entry_fail ip log_time
	index "$db_name" log_entry_fail_cp log_entry_fail client_name log_time
    ) | $tee_sql sqlite3 "$logdb"
fi
if $do_analyze; then
    [[ -n "$db" ]] || usage
    [[ -n "$logdb" ]] || usage
    (($# == 0)) && set -- /dev/fd/0
    (
        attach "$logdb"
	((days)) && printf "INSERT OR REPLACE INTO options (opt, val) VALUES ('days', %d);\n" $days
        $verbose && printf "SELECT 'Starting analysis at ', datetime('now', 'localtime');\n"
        $verbose && printf "SELECT 'Analyzing loaded entries...';\n"
        printf "BEGIN;\n"
        insert_enctypes
        printf "COMMIT;\n"
        printf ".read analyze.sql\n"
        $verbose && printf "SELECT 'Analysis complete at ', datetime('now', 'localtime');\n"
    ) |  $tee_sql sqlite3 "$db"
    (
        attach "$logdb"
	printf "PRAGMA synchronous = off;\n"
        $verbose && printf "SELECT 'Starting aggregation of data for trend analysis at ', datetime('now', 'localtime');\n"
        printf ".read aggregate_data.sql\n"
	prune
        $verbose && printf "SELECT 'Aggregation complete at ', datetime('now', 'localtime');\n"
    ) |  $tee_sql sqlite3 "$db"
fi

